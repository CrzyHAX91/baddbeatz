name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      continue-on-error: true
    
    - name: Install Node dependencies
      run: |
        if [ -f package.json ]; then npm ci; fi
      continue-on-error: true
    
    - name: Build static site
      run: |
        # Create docs directory for GitHub Pages
        mkdir -p docs
        
        # Copy assets directory if it exists
        if [ -d "assets" ]; then
          echo "Copying assets directory..."
          cp -r assets docs/
        fi
        
        # Copy all HTML files
        echo "Copying HTML files..."
        find . -maxdepth 1 -name "*.html" -exec cp {} docs/ \; 2>/dev/null || true
        
        # Copy other static files
        for file in robots.txt sitemap.xml CNAME manifest.json service-worker.js offline.html favicon.ico; do
          if [ -f "$file" ]; then
            echo "Copying $file..."
            cp "$file" docs/
          fi
        done
        
        # Copy data directory if it exists
        if [ -d "data" ]; then
          echo "Copying data directory..."
          cp -r data docs/
        fi
        
        # Copy LiteLLM documentation files
        for file in LITELLM_CONTEXT_WINDOW_FIX_GUIDE.md QUICK_FIX_REFERENCE.md COMPREHENSIVE_LITELLM_TESTING_REPORT.md; do
          if [ -f "$file" ]; then
            echo "Copying $file..."
            cp "$file" docs/
          fi
        done
        
        # Generate any dynamic content using Node.js if script exists
        if [ -f "scripts/build-docs.cjs" ]; then
          echo "Running build script..."
          node scripts/build-docs.cjs || true
        fi
        
        # Ensure index.html exists
        if [ ! -f "docs/index.html" ] && [ -f "index.html" ]; then
          echo "Copying index.html as fallback..."
          cp index.html docs/
        fi
        
        # Create a simple index.html if none exists
        if [ ! -f "docs/index.html" ]; then
          echo "Creating fallback index.html..."
          cat > docs/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>BaddBeatz</title>
        </head>
        <body>
            <h1>BaddBeatz</h1>
            <p>Welcome to BaddBeatz - Your Music Platform</p>
        </body>
        </html>
        EOF
        fi
        
        # List contents for debugging
        echo "Contents of docs directory:"
        ls -la docs/
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
