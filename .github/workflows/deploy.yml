name: Deploy to GitHub Pages and Cloudflare

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: false

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.10'

jobs:
  # Build job for GitHub Pages
  build-github-pages:
    name: Build for GitHub Pages
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        # Bypass submodule updates to avoid deployment errors
        submodules: false
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'baddbeatz/package-lock.json'
    
    - name: Install Python dependencies
      working-directory: baddbeatz
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt || echo "Some Python dependencies failed to install, continuing..."
        else
          echo "No requirements.txt found, skipping Python dependencies"
        fi
    
    - name: Install Node.js dependencies
      working-directory: baddbeatz
      run: |
        npm ci || npm install
    
    - name: Build static site for GitHub Pages
      working-directory: baddbeatz
      run: |
        echo "🚀 Building static site for GitHub Pages..."
        
        # Create docs directory for GitHub Pages
        mkdir -p docs
        
        # Copy static files with error handling
        echo "📁 Copying static assets..."
        [ -d assets ] && cp -r assets docs/ || echo "⚠️ No assets directory found"
        
        # Copy HTML files
        echo "📄 Copying HTML files..."
        for file in *.html; do
          [ -f "$file" ] && cp "$file" docs/ || echo "⚠️ $file not found"
        done
        
        # Copy other static files
        echo "📋 Copying other static files..."
        [ -f robots.txt ] && cp robots.txt docs/ || echo "⚠️ robots.txt not found"
        [ -f sitemap.xml ] && cp sitemap.xml docs/ || echo "⚠️ sitemap.xml not found"
        [ -f CNAME ] && cp CNAME docs/ || echo "⚠️ CNAME not found"
        [ -f manifest.json ] && cp manifest.json docs/ || echo "⚠️ manifest.json not found"
        [ -f service-worker.js ] && cp service-worker.js docs/ || echo "⚠️ service-worker.js not found"
        [ -d data ] && cp -r data docs/ || echo "⚠️ No data directory found"
        
        # Generate dynamic content using Node.js build script
        echo "⚙️ Running build script..."
        if [ -f scripts/build-docs.cjs ]; then
          node scripts/build-docs.cjs
        else
          echo "⚠️ build-docs.cjs not found, skipping dynamic content generation"
        fi
        
        # Verify build output
        echo "✅ Build completed. Contents of docs directory:"
        ls -la docs/
    
    - name: Setup GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v4
    
    - name: Upload GitHub Pages artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v3
      with:
        path: './baddbeatz/docs'

  # Deploy to GitHub Pages
  deploy-github-pages:
    name: Deploy to GitHub Pages
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-github-pages
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Build and deploy to Cloudflare Workers
  build-and-deploy-cloudflare:
    name: Build and Deploy to Cloudflare
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-github-pages
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: false
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'baddbeatz/package-lock.json'
    
    - name: Install dependencies
      working-directory: baddbeatz
      run: npm ci || npm install
    
    - name: Build for Cloudflare
      working-directory: baddbeatz
      run: |
        echo "🚀 Building for Cloudflare Workers..."
        npm run build || echo "Build script failed, continuing with manual build..."
        
        # Ensure dist directory exists for Cloudflare
        mkdir -p dist
        
        # Copy built assets to dist
        if [ -d docs ]; then
          cp -r docs/* dist/
        else
          echo "⚠️ No docs directory found, copying source files..."
          [ -d assets ] && cp -r assets dist/
          for file in *.html; do
            [ -f "$file" ] && cp "$file" dist/
          done
          [ -f manifest.json ] && cp manifest.json dist/
          [ -f service-worker.js ] && cp service-worker.js dist/
        fi
        
        echo "✅ Cloudflare build completed. Contents of dist directory:"
        ls -la dist/
    
    - name: Deploy to Cloudflare Workers
      working-directory: baddbeatz
      run: |
        echo "🚀 Deploying to Cloudflare Workers..."
        npx wrangler deploy --env production
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  # Notification job for deployment status
  notify-deployment-status:
    name: Notify Deployment Status
    if: always()
    runs-on: ubuntu-latest
    needs: [build-github-pages, deploy-github-pages, build-and-deploy-cloudflare]
    
    steps:
    - name: Determine deployment status
      id: status
      run: |
        if [[ "${{ needs.build-github-pages.result }}" == "success" && "${{ needs.deploy-github-pages.result }}" == "success" && "${{ needs.build-and-deploy-cloudflare.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=✅ All deployments completed successfully!" >> $GITHUB_OUTPUT
        elif [[ "${{ needs.build-github-pages.result }}" == "failure" || "${{ needs.deploy-github-pages.result }}" == "failure" || "${{ needs.build-and-deploy-cloudflare.result }}" == "failure" ]]; then
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ One or more deployments failed!" >> $GITHUB_OUTPUT
        else
          echo "status=partial" >> $GITHUB_OUTPUT
          echo "message=⚠️ Some deployments were skipped or cancelled" >> $GITHUB_OUTPUT
        fi
    
    - name: Create deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Service | Status | Result |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|--------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| GitHub Pages Build | ${{ needs.build-github-pages.result }} | ${{ needs.build-github-pages.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| GitHub Pages Deploy | ${{ needs.deploy-github-pages.result }} | ${{ needs.deploy-github-pages.result == 'success' && '✅' || needs.deploy-github-pages.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Cloudflare Deploy | ${{ needs.build-and-deploy-cloudflare.result }} | ${{ needs.build-and-deploy-cloudflare.result == 'success' && '✅' || needs.build-and-deploy-cloudflare.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Overall Status:** ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ steps.status.outputs.status }}" == "failure" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Troubleshooting" >> $GITHUB_STEP_SUMMARY
          echo "- Check the logs of failed jobs above" >> $GITHUB_STEP_SUMMARY
          echo "- Verify all required secrets are configured" >> $GITHUB_STEP_SUMMARY
          echo "- Ensure dependencies are properly installed" >> $GITHUB_STEP_SUMMARY
          echo "- Check for any breaking changes in the codebase" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Send Slack notification (if configured)
      if: env.SLACK_WEBHOOK_URL != ''
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"${{ steps.status.outputs.message }}\n\nRepository: ${{ github.repository }}\nCommit: ${{ github.sha }}\nBranch: ${{ github.ref_name }}\nWorkflow: ${{ github.workflow }}\"}" \
          ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Send email notification (if configured)
      if: env.EMAIL_SMTP_SERVER != ''
      run: |
        echo "Email notification would be sent here"
        echo "Status: ${{ steps.status.outputs.message }}"
        echo "Repository: ${{ github.repository }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
      env:
        EMAIL_SMTP_SERVER: ${{ secrets.EMAIL_SMTP_SERVER }}
        EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}
