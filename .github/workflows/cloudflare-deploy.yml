name: Deploy to Cloudflare Workers

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test-build:
    name: Test Build Process
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'baddbeatz/package-lock.json'

    - name: Install dependencies
      run: |
        cd baddbeatz
        npm ci

    - name: Verify Wrangler configuration
      run: |
        cd baddbeatz
        echo "🔍 Checking Wrangler configuration..."
        npx wrangler --version
        
        # Validate wrangler.toml syntax
        if npx wrangler dev --dry-run --local; then
          echo "✅ Wrangler configuration is valid"
        else
          echo "❌ Wrangler configuration has issues"
          exit 1
        fi

    - name: Build assets
      run: |
        cd baddbeatz
        echo "🚀 Building assets for Cloudflare deployment..."
        npm run build:assets
        
        # Verify build output
        echo "📦 Verifying build output..."
        if [ -d "dist" ]; then
          echo "✅ dist directory created"
          echo "📄 Files in dist:"
          ls -la dist/
          
          # Count files
          FILE_COUNT=$(find dist -type f | wc -l)
          echo "📊 Total files: $FILE_COUNT"
          
          if [ $FILE_COUNT -lt 25 ]; then
            echo "⚠️  Warning: Expected at least 25 files, got $FILE_COUNT"
          else
            echo "✅ File count looks good"
          fi
        else
          echo "❌ dist directory not found"
          exit 1
        fi

    - name: Test critical files
      run: |
        cd baddbeatz
        echo "🧪 Testing for critical files..."
        
        CRITICAL_FILES=(
          "dist/index.html"
          "dist/dashboard.html"
          "dist/admin.html"
          "dist/manifest.json"
          "dist/service-worker.js"
          "dist/assets"
        )
        
        for file in "${CRITICAL_FILES[@]}"; do
          if [ -e "$file" ]; then
            echo "✅ Found: $file"
          else
            echo "❌ Missing: $file"
            exit 1
          fi
        done

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cloudflare-build-${{ github.sha }}
        path: baddbeatz/dist/
        retention-days: 7

  deploy-preview:
    name: Deploy Preview (PR)
    runs-on: ubuntu-latest
    needs: test-build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'baddbeatz/package-lock.json'

    - name: Install dependencies
      run: |
        cd baddbeatz
        npm ci

    - name: Build for deployment
      run: |
        cd baddbeatz
        npm run build:assets

    - name: Deploy to Cloudflare Workers (Development)
      run: |
        cd baddbeatz
        echo "🚀 Deploying to Cloudflare Workers (Development Environment)..."
        npx wrangler deploy --env development
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

    - name: Comment PR with preview URL
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '🚀 **Preview Deployment Complete!**\n\n' +
                  '**Development URL:** https://baddbeatz-dev.your-subdomain.workers.dev\n\n' +
                  '**Build Status:** ✅ Success\n' +
                  '**Commit:** ' + context.sha.substring(0, 7) + '\n\n' +
                  '_This preview will be available until the next deployment._'
          })

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: test-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://baddbeatz.nl
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'baddbeatz/package-lock.json'

    - name: Install dependencies
      run: |
        cd baddbeatz
        npm ci

    - name: Build for production
      run: |
        cd baddbeatz
        npm run build:assets
        
        # Verify production build
        echo "🔍 Verifying production build..."
        if [ ! -f "dist/index.html" ]; then
          echo "❌ Missing index.html in production build"
          exit 1
        fi
        
        if [ ! -f "dist/CNAME" ]; then
          echo "❌ Missing CNAME file for custom domain"
          exit 1
        fi
        
        echo "✅ Production build verified"

    - name: Deploy to Cloudflare Workers (Production)
      run: |
        cd baddbeatz
        echo "🚀 Deploying to Cloudflare Workers (Production)..."
        npx wrangler deploy --env production
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

    - name: Verify deployment
      run: |
        echo "🧪 Verifying deployment..."
        
        # Wait a moment for deployment to propagate
        sleep 10
        
        # Test main domain
        if curl -f -s https://baddbeatz.nl > /dev/null; then
          echo "✅ Main domain (baddbeatz.nl) is responding"
        else
          echo "⚠️  Main domain check failed (may take time to propagate)"
        fi
        
        # Test www subdomain
        if curl -f -s https://www.baddbeatz.nl > /dev/null; then
          echo "✅ WWW subdomain is responding"
        else
          echo "⚠️  WWW subdomain check failed (may take time to propagate)"
        fi

    - name: Create deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ✅ Success" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
        echo "**Domain:** https://baddbeatz.nl" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Deployed at:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Files Deployed" >> $GITHUB_STEP_SUMMARY
        cd baddbeatz
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        find dist -type f | head -20 >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  cleanup:
    name: Cleanup Old Deployments
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Cleanup artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const oldArtifacts = artifacts.data.artifacts
            .filter(artifact => artifact.name.startsWith('cloudflare-build-'))
            .filter(artifact => {
              const age = Date.now() - new Date(artifact.created_at).getTime();
              return age > 7 * 24 * 60 * 60 * 1000; // 7 days
            });
          
          for (const artifact of oldArtifacts) {
            await github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact.id,
            });
            console.log(`Deleted artifact: ${artifact.name}`);
          }
