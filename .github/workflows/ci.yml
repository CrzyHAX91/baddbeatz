name: "BaddBeatz CI/CD Pipeline"

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

    - name: Install Node.js dependencies
      run: |
        npm install

    - name: Lint Python code
      run: |
        # Install flake8 for linting
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test Python scripts
      run: |
        # Test existing Python scripts syntax
        if [ -f scripts/import_assets.py ]; then
          python -m py_compile scripts/import_assets.py
        fi
        if [ -f scripts/init_db.py ]; then
          python -m py_compile scripts/init_db.py
        fi

    - name: Validate HTML files
      run: |
        # Install html5validator
        pip install html5validator
        # Validate HTML files
        html5validator --root . --match "*.html" --ignore-re "Attribute.*not allowed" || echo "HTML validation completed with warnings"

    - name: Build assets
      run: |
        # Run asset optimization if script exists
        if [ -f scripts/optimize-assets.cjs ]; then
          node scripts/optimize-assets.cjs
        fi

    - name: Test project health
      run: |
        # Validate project structure
        echo "Checking project structure..."
        if [ -f index.html ]; then
          echo "✓ Main index.html found"
        fi
        if [ -f package.json ]; then
          echo "✓ Package.json found"
        fi
        if [ -f requirements.txt ]; then
          echo "✓ Requirements.txt found"
        fi
        echo "Project health check completed"

    - name: Security scan
      run: |
        # Install safety for Python security scanning
        pip install safety
        # Check for known security vulnerabilities
        safety check --json || echo "Security scan completed"

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Deploy to preview environment
      run: |
        echo "Would deploy to preview environment for PR #${{ github.event.number }}"
        echo "Preview URL would be: https://baddbeatz-pr-${{ github.event.number }}.preview.com"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        echo "Production URL: https://baddbeatz.com"
