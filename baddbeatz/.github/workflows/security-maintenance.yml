name: 🔒 Security & Dependency Maintenance

on:
  # Run daily at 1 AM UTC (before Dependabot to avoid conflicts)
  schedule:
    - cron: '0 1 * * *'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update all dependencies'
        required: false
        default: 'false'
        type: boolean
      security_only:
        description: 'Update only security-related packages'
        required: false
        default: 'false'
        type: boolean

  # Run on security advisories
  repository_dispatch:
    types: [security-alert]

permissions:
  contents: write
  pull-requests: write
  security-events: write
  actions: read

jobs:
  security-audit:
    name: 🛡️ Security Audit & Updates
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 🔧 Install Security Tools
      run: |
        pip install --upgrade pip
        pip install safety bandit semgrep
        npm install -g npm-audit-resolver audit-ci

    - name: 🔍 Python Security Scan
      id: python-security
      run: |
        echo "## 🐍 Python Security Scan" >> $GITHUB_STEP_SUMMARY
        
        # Install current requirements
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi
        
        # Run safety check
        safety check --json > safety-report.json || true
        
        # Parse results
        VULNERABILITIES=$(cat safety-report.json | jq '.vulnerabilities | length' 2>/dev/null || echo "0")
        echo "python_vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
        
        if [ "$VULNERABILITIES" -gt 0 ]; then
          echo "⚠️ Found $VULNERABILITIES Python vulnerabilities" >> $GITHUB_STEP_SUMMARY
          cat safety-report.json | jq -r '.vulnerabilities[] | "- **\(.package_name)** \(.installed_version) → \(.vulnerable_spec) (\(.vulnerability_id))"' >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ No Python vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        fi

    - name: 🔍 Node.js Security Scan
      id: node-security
      run: |
        echo "## 📦 Node.js Security Scan" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "package.json" ]; then
          npm audit --audit-level=moderate --json > npm-audit.json || true
          
          VULNERABILITIES=$(cat npm-audit.json | jq '.metadata.vulnerabilities.total' 2>/dev/null || echo "0")
          echo "node_vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
          
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "⚠️ Found $VULNERABILITIES Node.js vulnerabilities" >> $GITHUB_STEP_SUMMARY
            npm audit --audit-level=moderate >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No Node.js vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "📝 No package.json found" >> $GITHUB_STEP_SUMMARY
          echo "node_vulnerabilities=0" >> $GITHUB_OUTPUT
        fi

    - name: 🔄 Update Python Dependencies
      if: steps.python-security.outputs.python_vulnerabilities > 0 || github.event.inputs.force_update == 'true'
      run: |
        set -e  # Exit on any error
        echo "## 🔄 Updating Python Dependencies" >> $GITHUB_STEP_SUMMARY
        
        # Create backup
        cp requirements.txt requirements.txt.backup
        
        # Update security-critical packages first
        SECURITY_PACKAGES="flask tornado setuptools h11 flask-caching werkzeug django requests urllib3 cryptography"
        
        for package in $SECURITY_PACKAGES; do
          if pip show $package >/dev/null 2>&1; then
            echo "Checking updates for $package..."
            # Use pip-tools or direct pip install with retry logic
            for i in {1..3}; do
              if pip install --upgrade $package --no-deps; then
                CURRENT_VERSION=$(pip show $package | grep Version | cut -d' ' -f2)
                echo "- Updated **$package** to $CURRENT_VERSION" >> $GITHUB_STEP_SUMMARY
                break
              else
                echo "Retry $i/3 for $package"
                sleep 2
              fi
            done
          fi
        done
        
        # Generate new requirements.txt with current versions
        pip freeze > requirements-new.txt
        
        # Update requirements.txt with security fixes
        if [ "${{ github.event.inputs.security_only }}" != "true" ] || [ "${{ github.event.inputs.force_update }}" == "true" ]; then
          # Validate new requirements before replacing
          if pip install --dry-run -r requirements-new.txt >/dev/null 2>&1; then
            mv requirements-new.txt requirements.txt
            echo "✅ All dependencies updated successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ New requirements validation failed, keeping backup" >> $GITHUB_STEP_SUMMARY
            mv requirements.txt.backup requirements.txt
            rm requirements-new.txt
          fi
        else
          # Only update security-related packages in requirements.txt
          for package in $SECURITY_PACKAGES; do
            if grep -q "^$package==" requirements.txt; then
              NEW_VERSION=$(grep "^$package==" requirements-new.txt || echo "")
              if [ ! -z "$NEW_VERSION" ]; then
                sed -i "s/^$package==.*/$NEW_VERSION/" requirements.txt
              fi
            fi
          done
          rm requirements-new.txt
          echo "✅ Security packages updated in requirements.txt" >> $GITHUB_STEP_SUMMARY
        fi

    - name: 🔄 Update Node.js Dependencies
      if: steps.node-security.outputs.node_vulnerabilities > 0 || github.event.inputs.force_update == 'true'
      run: |
        if [ -f "package.json" ]; then
          echo "## 🔄 Updating Node.js Dependencies" >> $GITHUB_STEP_SUMMARY
          
          # Update security vulnerabilities
          npm audit fix --audit-level=moderate || true
          
          if [ "${{ github.event.inputs.force_update }}" == "true" ]; then
            # Update all dependencies
            npm update
            echo "✅ All Node.js dependencies updated" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Security vulnerabilities fixed" >> $GITHUB_STEP_SUMMARY
          fi
        fi

    - name: 🧪 Test Updated Dependencies
      run: |
        echo "## 🧪 Testing Updated Dependencies" >> $GITHUB_STEP_SUMMARY
        
        # Test Python imports
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
          python -c "
import sys
try:
    import flask, tornado, werkzeug
    print('✅ Core Python packages import successfully')
except ImportError as e:
    print(f'❌ Import error: {e}')
    sys.exit(1)
" && echo "✅ Python dependencies test passed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Test Node.js if applicable
        if [ -f "package.json" ]; then
          npm test --if-present || echo "⚠️ No npm tests defined" >> $GITHUB_STEP_SUMMARY
        fi

    - name: 🔍 Final Security Verification
      run: |
        echo "## 🔍 Final Security Verification" >> $GITHUB_STEP_SUMMARY
        
        # Re-run security scans
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
          FINAL_VULNS=$(safety check --json | jq '.vulnerabilities | length' 2>/dev/null || echo "0")
          echo "**Python vulnerabilities after update:** $FINAL_VULNS" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "package.json" ]; then
          FINAL_NODE_VULNS=$(npm audit --audit-level=moderate --json | jq '.metadata.vulnerabilities.total' 2>/dev/null || echo "0")
          echo "**Node.js vulnerabilities after update:** $FINAL_NODE_VULNS" >> $GITHUB_STEP_SUMMARY
        fi

    - name: 📝 Generate Security Report
      run: |
        cat > SECURITY_UPDATE_REPORT.md << 'EOF'
        # 🔒 Automated Security Update Report
        
        **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Workflow:** Security & Dependency Maintenance
        **Trigger:** ${{ github.event_name }}
        
        ## 📊 Security Status
        
        ### Before Update:
        - Python vulnerabilities: ${{ steps.python-security.outputs.python_vulnerabilities }}
        - Node.js vulnerabilities: ${{ steps.node-security.outputs.node_vulnerabilities }}
        
        ### Actions Taken:
        - ✅ Security audit completed
        - ✅ Dependencies updated
        - ✅ Tests executed
        - ✅ Final verification completed
        
        ## 🛡️ Security Recommendations
        
        1. **Regular Monitoring**: This workflow runs daily to catch new vulnerabilities
        2. **Manual Review**: Review and test major version updates manually
        3. **Dependency Pinning**: Keep critical dependencies pinned to secure versions
        4. **Security Alerts**: Enable GitHub Dependabot for real-time alerts
        
        ## 📋 Next Steps
        
        - Monitor for new security advisories
        - Review dependency update logs
        - Test application functionality after updates
        - Update security documentation as needed
        
        ---
        *Generated by GitHub Actions Security Workflow*
        EOF

    - name: 📤 Commit Security Updates
      if: steps.python-security.outputs.python_vulnerabilities > 0 || steps.node-security.outputs.node_vulnerabilities > 0 || github.event.inputs.force_update == 'true'
      run: |
        git config --local user.email "security-bot@github.com"
        git config --local user.name "Security Maintenance Bot"
        
        git add .
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
          echo "ℹ️ No security updates required" >> $GITHUB_STEP_SUMMARY
        else
          # Create detailed commit message
          COMMIT_MSG="🔒 AUTOMATED SECURITY UPDATE

🛡️ Security Updates Applied:
- Python vulnerabilities fixed: ${{ steps.python-security.outputs.python_vulnerabilities }}
- Node.js vulnerabilities fixed: ${{ steps.node-security.outputs.node_vulnerabilities }}
- Dependencies updated to latest secure versions
- Security verification completed

✅ Automated by Security Maintenance Workflow
📅 $(date -u +'%Y-%m-%d %H:%M:%S UTC')
🤖 Workflow: ${{ github.workflow }}
🔗 Run: ${{ github.run_id }}

[skip ci]"
          
          git commit -m "$COMMIT_MSG"
          
          # Push with retry logic
          for i in {1..3}; do
            if git push; then
              echo "✅ Security updates committed and pushed successfully" >> $GITHUB_STEP_SUMMARY
              break
            else
              echo "Push attempt $i/3 failed, retrying..."
              sleep 5
              git pull --rebase
            fi
          done
        fi

    - name: 🚨 Create Security Issue
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 Security Workflow Failed - Immediate Attention Required',
            body: `## 🚨 Security Maintenance Workflow Failed
            
            **Date:** ${new Date().toISOString()}
            **Workflow Run:** ${context.runId}
            **Commit:** ${context.sha}
            
            ### ⚠️ Issue Details
            The automated security maintenance workflow has failed. This could indicate:
            
            - New security vulnerabilities that couldn't be automatically resolved
            - Dependency conflicts requiring manual intervention
            - Test failures after security updates
            - Infrastructure or configuration issues
            
            ### 🔧 Required Actions
            
            1. **Immediate Review**: Check the workflow logs for specific error details
            2. **Manual Security Audit**: Run \`safety check\` and \`npm audit\` locally
            3. **Dependency Resolution**: Manually resolve any conflicting dependencies
            4. **Security Patches**: Apply critical security patches immediately
            5. **Workflow Fix**: Address any workflow configuration issues
            
            ### 📋 Security Checklist
            
            - [ ] Review workflow failure logs
            - [ ] Run local security scans
            - [ ] Apply critical security updates
            - [ ] Test application functionality
            - [ ] Update security documentation
            - [ ] Fix workflow configuration
            
            **Priority:** HIGH - Security workflows should never fail silently.
            
            ---
            *Auto-generated by Security Maintenance Workflow*`,
            labels: ['security', 'bug', 'high-priority']
          })

  dependency-review:
    name: 📋 Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔍 Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
        deny-licenses: GPL-2.0, GPL-3.0

  security-scorecard:
    name: 📊 Security Scorecard
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write
      
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        
    - name: 🏆 Run Analysis
      uses: ossf/scorecard-action@v2.3.1
      with:
        results_file: results.sarif
        results_format: sarif
        publish_results: true
        
    - name: 📤 Upload Results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
