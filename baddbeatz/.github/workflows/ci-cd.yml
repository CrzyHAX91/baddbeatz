name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'

permissions:
  contents: read
  security-events: write
  pull-requests: write
  checks: write

jobs:
  # Code Quality & Security Checks
  quality-checks:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 🔧 Install Dependencies
      run: |
        # Python dependencies
        pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        pip install flake8 black isort mypy pylint bandit safety
        
        # Node.js dependencies (if package.json exists)
        if [ -f package.json ]; then
          npm ci
        fi

    - name: 🎨 Code Formatting Check
      run: |
        echo "## 🎨 Code Formatting Results" >> $GITHUB_STEP_SUMMARY
        
        # Python formatting
        if find . -name "*.py" -not -path "./temp_venv/*" | head -1 | grep -q .; then
          echo "### Python Formatting (Black)" >> $GITHUB_STEP_SUMMARY
          if black --check --diff . --exclude="temp_venv/"; then
            echo "✅ Python code is properly formatted" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Python code formatting issues found" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "### Import Sorting (isort)" >> $GITHUB_STEP_SUMMARY
          if isort --check-only --diff . --skip-glob="temp_venv/*"; then
            echo "✅ Python imports are properly sorted" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Python import sorting issues found" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
        fi

    - name: 🔍 Linting
      run: |
        echo "## 🔍 Linting Results" >> $GITHUB_STEP_SUMMARY
        
        # Python linting
        if find . -name "*.py" -not -path "./temp_venv/*" | head -1 | grep -q .; then
          echo "### Python Linting (Flake8)" >> $GITHUB_STEP_SUMMARY
          if flake8 . --exclude=temp_venv --max-line-length=88 --extend-ignore=E203,W503; then
            echo "✅ No Python linting issues found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Python linting issues found (non-blocking)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### Python Code Analysis (Pylint)" >> $GITHUB_STEP_SUMMARY
          pylint **/*.py --ignore=temp_venv --exit-zero --output-format=text || true
        fi
        
        # JavaScript/TypeScript linting (if applicable)
        if [ -f package.json ] && [ -f .eslintrc.* ]; then
          echo "### JavaScript Linting (ESLint)" >> $GITHUB_STEP_SUMMARY
          npm run lint || echo "⚠️ JavaScript linting issues found" >> $GITHUB_STEP_SUMMARY
        fi

    - name: 🛡️ Security Scanning
      run: |
        echo "## 🛡️ Security Scanning Results" >> $GITHUB_STEP_SUMMARY
        
        # Python security scan
        if [ -f requirements.txt ]; then
          echo "### Python Security (Safety)" >> $GITHUB_STEP_SUMMARY
          if safety check --json > safety-report.json; then
            echo "✅ No Python security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            VULNS=$(cat safety-report.json | jq '.vulnerabilities | length' 2>/dev/null || echo "0")
            echo "⚠️ Found $VULNS Python security vulnerabilities" >> $GITHUB_STEP_SUMMARY
            cat safety-report.json | jq -r '.vulnerabilities[] | "- **\(.package_name)** \(.installed_version): \(.vulnerability_id)"' >> $GITHUB_STEP_SUMMARY || true
          fi
          
          echo "### Python Security (Bandit)" >> $GITHUB_STEP_SUMMARY
          bandit -r . -x temp_venv -f json -o bandit-report.json || true
          if [ -f bandit-report.json ]; then
            ISSUES=$(cat bandit-report.json | jq '.results | length' 2>/dev/null || echo "0")
            echo "Found $ISSUES potential security issues with Bandit" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        # Node.js security scan
        if [ -f package.json ]; then
          echo "### Node.js Security (NPM Audit)" >> $GITHUB_STEP_SUMMARY
          if npm audit --audit-level=moderate --json > npm-audit.json; then
            echo "✅ No Node.js security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            VULNS=$(cat npm-audit.json | jq '.metadata.vulnerabilities.total' 2>/dev/null || echo "0")
            echo "⚠️ Found $VULNS Node.js security vulnerabilities" >> $GITHUB_STEP_SUMMARY
          fi
        fi

  # Testing
  test:
    name: 🧪 Testing
    runs-on: ubuntu-latest
    needs: quality-checks
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        pip install pytest pytest-cov pytest-mock

    - name: 🧪 Run Python Tests
      run: |
        echo "## 🧪 Test Results (Python ${{ matrix.python-version }})" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "tests" ] && find tests -name "*.py" | head -1 | grep -q .; then
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing
          echo "✅ Python tests completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ No Python tests found in tests/ directory" >> $GITHUB_STEP_SUMMARY
          # Basic import test
          python -c "
import sys
import importlib.util
import os

print('Testing basic imports...')
try:
    if os.path.exists('server.py'):
        spec = importlib.util.spec_from_file_location('server', 'server.py')
        server = importlib.util.module_from_spec(spec)
        print('✅ server.py imports successfully')
    
    if os.path.exists('server_improved.py'):
        spec = importlib.util.spec_from_file_location('server_improved', 'server_improved.py')
        server_improved = importlib.util.module_from_spec(spec)
        print('✅ server_improved.py imports successfully')
        
    print('✅ Basic import tests passed')
except Exception as e:
    print(f'❌ Import test failed: {e}')
    sys.exit(1)
"
          echo "✅ Basic import tests passed" >> $GITHUB_STEP_SUMMARY
        fi

    - name: 📊 Upload Coverage
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Frontend Testing (if applicable)
  frontend-test:
    name: 🎨 Frontend Testing
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'frontend') || contains(github.event.head_commit.message, 'assets') || github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      if: hashFiles('package.json') != ''
      run: npm ci

    - name: 🧪 Run Frontend Tests
      if: hashFiles('package.json') != ''
      run: |
        echo "## 🎨 Frontend Test Results" >> $GITHUB_STEP_SUMMARY
        
        if npm run test --if-present; then
          echo "✅ Frontend tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Frontend tests failed or not configured" >> $GITHUB_STEP_SUMMARY
        fi

    - name: 🔍 HTML Validation
      run: |
        echo "## 🔍 HTML Validation Results" >> $GITHUB_STEP_SUMMARY
        
        # Basic HTML validation
        HTML_FILES=$(find . -name "*.html" -not -path "./temp_venv/*" -not -path "./node_modules/*")
        if [ ! -z "$HTML_FILES" ]; then
          echo "Found HTML files to validate:" >> $GITHUB_STEP_SUMMARY
          echo "$HTML_FILES" | while read file; do
            echo "- $file" >> $GITHUB_STEP_SUMMARY
          done
          echo "✅ HTML files found and ready for validation" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ No HTML files found for validation" >> $GITHUB_STEP_SUMMARY
        fi

  # Build & Deploy
  build-deploy:
    name: 🚀 Build & Deploy
    runs-on: ubuntu-latest
    needs: [quality-checks, test]
    if: github.ref == 'refs/heads/main' || github.event.inputs.deploy_environment != ''
    
    environment: 
      name: ${{ github.event.inputs.deploy_environment || 'staging' }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi

    - name: 🔧 Build Application
      run: |
        echo "## 🔧 Build Process" >> $GITHUB_STEP_SUMMARY
        
        # Create build directory
        mkdir -p build
        
        # Copy application files
        cp -r assets build/ 2>/dev/null || echo "No assets directory found"
        cp *.html build/ 2>/dev/null || echo "No HTML files found"
        cp *.py build/ 2>/dev/null || echo "No Python files found"
        cp requirements.txt build/ 2>/dev/null || echo "No requirements.txt found"
        
        echo "✅ Build completed successfully" >> $GITHUB_STEP_SUMMARY
        echo "📦 Build artifacts created in build/ directory" >> $GITHUB_STEP_SUMMARY

    - name: 🧪 Deployment Health Check
      run: |
        echo "## 🧪 Deployment Health Check" >> $GITHUB_STEP_SUMMARY
        
        # Basic health checks
        if [ -f "build/server.py" ] || [ -f "build/server_improved.py" ]; then
          echo "✅ Server files present" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ No server files found" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "build/index.html" ]; then
          echo "✅ Main HTML file present" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ No index.html found" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -d "build/assets" ]; then
          echo "✅ Assets directory present" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ No assets directory found" >> $GITHUB_STEP_SUMMARY
        fi

    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-${{ github.sha }}
        path: build/
        retention-days: 30

    - name: 🚀 Deploy Notification
      run: |
        echo "## 🚀 Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.deploy_environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ✅ Ready for deployment" >> $GITHUB_STEP_SUMMARY
        
        # In a real scenario, this would trigger actual deployment
        echo "🎉 Deployment preparation completed successfully!"

  # Security Final Check
  security-final:
    name: 🔒 Final Security Check
    runs-on: ubuntu-latest
    needs: [build-deploy]
    if: always() && (needs.build-deploy.result == 'success' || needs.build-deploy.result == 'skipped')
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Final Security Scan
      run: |
        echo "## 🔒 Final Security Verification" >> $GITHUB_STEP_SUMMARY
        
        # Check for sensitive files
        SENSITIVE_FILES=$(find . -name "*.env*" -o -name "*.key" -o -name "*.pem" -o -name "*secret*" -not -path "./temp_venv/*" -not -path "./.git/*")
        if [ -z "$SENSITIVE_FILES" ]; then
          echo "✅ No sensitive files found in repository" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Potential sensitive files found:" >> $GITHUB_STEP_SUMMARY
          echo "$SENSITIVE_FILES" | while read file; do
            echo "- $file" >> $GITHUB_STEP_SUMMARY
          done
        fi
        
        # Check for hardcoded secrets (basic patterns)
        SECRET_PATTERNS="password|secret|key|token|api_key"
        if grep -r -i -E "$SECRET_PATTERNS" --include="*.py" --include="*.js" --include="*.html" . --exclude-dir=temp_venv --exclude-dir=.git | grep -v "placeholder\|example\|dummy" | head -5; then
          echo "⚠️ Potential hardcoded secrets found - please review" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ No obvious hardcoded secrets detected" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "🔒 Final security check completed" >> $GITHUB_STEP_SUMMARY
